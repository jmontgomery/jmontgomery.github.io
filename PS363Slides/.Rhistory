x<-seq(from=-5, to=5, by=.1)
plot(x, dt(x, df=5000), lwd=3, type="l", col=1, lty=1)
lines(x, dt(x, df=10), lwd=3, ylim=c(0, .4), col=2, lty=2)
lines(x, dt(x, df=5), lwd=3, ylim=c(0, .4), col=3, lty=3)
lines(x, dt(x, df=1), lwd=3, ylim=c(0, .4), col=4, lty=4)
legend("topleft",
c("n(0,1)", "t(df=10)", "t(df=5)", "t(df=1)"),
lty=c(1,2,3,4), col=(1,2,3,4), bty="n")
x<-seq(from=-5, to=5, by=.1)
plot(x, dt(x, df=5000), lwd=3, type="l", col=1, lty=1)
lines(x, dt(x, df=10), lwd=3, ylim=c(0, .4), col=2, lty=2)
lines(x, dt(x, df=5), lwd=3, ylim=c(0, .4), col=3, lty=3)
lines(x, dt(x, df=1), lwd=3, ylim=c(0, .4), col=4, lty=4)
plot(x, dt(x, df=5000), lwd=3, type="l", col=1, lty=1)
plot(x, dt(x, df=5000), lwd=3, type="l", col=1, lty=1)
x<-seq(from=-5, to=5, by=.1)
plot(x, dt(x, df=5000), lwd=3, type="l", col=1, lty=1)
x<-seq(from=-5, to=5, by=.1)
plot(x, dt(x, df=5000), lwd=3, type="l", col=1, lty=1)
lines(x, dt(x, df=10), lwd=3, ylim=c(0, .4), col=2, lty=2)
lines(x, dt(x, df=5), lwd=3, ylim=c(0, .4), col=3, lty=3)
lines(x, dt(x, df=1), lwd=3, ylim=c(0, .4), col=4, lty=4)
legend("topleft",
c("n(0,1)", "t(df=10)", "t(df=5)", "t(df=1)"),
lty=c(1,2,3,4), col=(1,2,3,4), bty="n")
x<-seq(from=-5, to=5, by=.1)
plot(x, dt(x, df=5000), lwd=3, type="l", col=1, lty=1)
lines(x, dt(x, df=10), lwd=3, ylim=c(0, .4), col=2, lty=2)
lines(x, dt(x, df=5), lwd=3, ylim=c(0, .4), col=3, lty=3)
lines(x, dt(x, df=1), lwd=3, ylim=c(0, .4), col=4, lty=4)
legend("topleft",
c("n(0,1)", "t(df=10)", "t(df=5)", "t(df=1)"),
lty=c(1,2,3,4), col=c(1,2,3,4), bty="n")
library(catSurv)
install.packages(catSurv)
install.packages("catSurv")
observed.X<-rbinom(size=100, p=.5)
observed.X<-rbinom(n=1, size=100, p=.5)
observed.X
observed.X<-rbinom(n=1, size=100, p=.4)
observed.X ###
p.hat<-observed.X
p.hat<-observed.X/100
p.hat
pretend.X<-rep(NA, 100)
pretend.X
pretend.X<-rep(NA, 1000) ## where I will store my bootstrap draws
pretend.X
for (i in 1:1000){
pretend.X[i]<-rbinom(n=1, size=100, p=p.hat)
}
pretend.X
bootstrapped.pHat<-pretend.X/100
bootstrapped.pHat
sqrt(sum((boostrappted.pHat-p.hat)^2)/1000)
bootstrapped.pHat<-pretend.X/100
bootstrapped.pHat
sqrt(sum((boostrapped.pHat-p.hat)^2)/1000)
sqrt(sum((bootstrapped.pHat-p.hat)^2)/1000)
tau.hat<-p.hat/(1-p.hat)
bootstrapped.tau.hat<-bootstrapped.pHat/(1-bootstrapped.pHat)
sqrt(sum((bootstrapped.tau.at-tau.hat)^2)/1000)
bootstrapped.tau.hat<-bootstrapped.pHat/(1-bootstrapped.pHat)
sqrt(sum((bootstrapped.tau.at-tau.hat)^2)/1000)
sqrt(sum((bootstrapped.tau.hat-tau.hat)^2)/1000)
(1/(1-p.hat)^2 * p*(1-p)/n)
(1/(1-p.hat)^2 * p.hat*(1-p.hat)/n)
(1/(1-p.hat)^2 * p.hat*(1-p.hat)/100)
sqrt((1/(1-p.hat)^2 * p.hat*(1-p.hat)/100))
observed.X<-rbinom(n=1, size=10000, p=.4)
observed.X ###
### Here I am calculating my MLE for p -- p.hat
p.hat<-observed.X/10000
p.hat
tau.hat<-p.hat/(1-p.hat)
### Here I am generating 1000 bootstrap samples from my assumed
# DGP, where I am using my esitmate p.hat
pretend.X<-rep(NA, 1000) ## where I will store my bootstrap draws
## B=1000
pretend.X
for (i in 1:1000){
pretend.X[i]<-rbinom(n=1, size=10000, p=p.hat)
}
pretend.X
## Now I need to calculate the standard error
bootstrapped.pHat<-pretend.X/10000
bootstrapped.pHat
bootstrapped.tau.hat<-bootstrapped.pHat/(1-bootstrapped.pHat)
## Bootstrapped standard errors
sqrt(sum((bootstrapped.tau.hat-tau.hat)^2)/1000)
##
sqrt((1/(1-p.hat)^2 * p.hat*(1-p.hat)/10000))
observed.X<-rbinom(n=1, size=10000, p=.4)
observed.X ###
p.hat<-observed.X/10000
p.hat
tau.hat<-p.hat/(1-p.hat)
pretend.X<-rep(NA, 1000) ## where I will store my bootstrap draws
pretend.X
for (i in 1:1000){
pretend.X[i]<-rbinom(n=1, size=10000, p=p.hat)
}
pretend.X
bootstrapped.pHat<-pretend.X/10000
bootstrapped.pHat
bootstrapped.tau.hat<-bootstrapped.pHat/(1-bootstrapped.pHat)
sqrt(sum((bootstrapped.tau.hat-tau.hat)^2)/1000)
sqrt((1/(1-p.hat)^2 * p.hat*(1-p.hat)/10000))
p.hat
sd(bootstrapped.tau)
sd(bootstrapped.tau)
sd(bootstrapped.tau.hat)
sqrt((p.hat/(1-p.hat)^2 * p.hat*(1-p.hat)/10000))
p.hat
sd(bootstrapped.tau.hat)
sqrt((p.hat^2/(1-p.hat)^2 * p.hat*(1-p.hat)/10000))
sd(bootstrapped.tau.hat)
sqrt((p.hat^2/(1-p.hat)^2 * p.hat*(1-p.hat)/10000))
sqrt((p.hat^2/(1-p.hat)^2 * p.hat*(1-p.hat)/10000))
p.hat
sd(bootstrapped.tau.hat)
sqrt((p.hat^2/(1-p.hat)^2 * p.hat*(1-p.hat)/10000))
sqrt((1/(1-p.hat)^2 * p.hat*(1-p.hat)/10000))
sd(bootstrapped.tau.hat)
sqrt((1/(1-p.hat)^2 * p.hat*(1-p.hat)/10000))
