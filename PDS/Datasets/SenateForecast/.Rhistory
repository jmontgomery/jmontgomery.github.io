library(ggplot2)
setwd("~/GitHub/jmontgomery.github.io/PDS/Slides")
primaryPolls<-read.csv("president_primary_polls_foeb2020.csv", stringsAsFactors = FALSE)
primaryPolls<-read.csv("president_primary_polls_feb2020.csv", stringsAsFactors = FALSE)
colnames(primaryPolls)
primaryPolls$start_date
primaryPolls$start_date<-as.Date(primaryPolls$start_date)
primaryPolls$start_date
primaryPolls$start_date<-as.Date(primaryPolls$start_date)
primaryPolls$start_date
primaryPolls<-read.csv("president_primary_polls_feb2020.csv", stringsAsFactors = FALSE)
colnames(primaryPolls)
primaryPolls$start_date#<-as.Date(primaryPolls$start_date)
as.Date(primaryPolls$start_date, "%m/%d/%Y")
temp<-as.Date(primaryPolls$start_date, "%m/%d/%Y")
colnames(primaryPolls)
head(primaryPolls)
plot(temp, primaryPolls$pct)
primaryPolls$state
primaryPolls$state=="New Hampshire"
primaryPolls<-primaryPolls[primaryPolls$state=="New Hampshire",]
primaryPolls[primaryPolls$candidate_name%in%c("Amy Klobuchar"),]
primaryPolls[primaryPolls$candidate_name%in%c("Amy Klobuchar", "Andrew Yant"),]
primaryPolls[primaryPolls$candidate_name%in%c("Amy Klobuchar", "Andrew Yang"),]
primaryPolls[primaryPolls$candidate_name%in%c("Amy Klobuchar", "Andrew Yang", "Bernard Sanders", "Elizabeth Warren"),]
primaryPolls[primaryPolls$candidate_name%in%c("Amy Klobuchar", "Andrew Yang", "Bernard Sanders", "Elizabeth Warren", "Joseph R. Biden Jr."),]
primaryPolls[primaryPolls$candidate_name%in%c("Amy Klobuchar", "Andrew Yang", "Bernard Sanders", "Elizabeth Warren", "Joseph R. Biden Jr.", "Michael Bloomberg"),]
primaryPolls[primaryPolls$candidate_name%in%c("Amy Klobuchar", "Andrew Yang", "Bernard Sanders", "Elizabeth Warren", "Joseph R. Biden Jr.", "Michael Bloomberg", "Pete Buttigieg"),]
primaryPolls<-primaryPolls[primaryPolls$candidate_name%in%c("Amy Klobuchar", "Andrew Yang", "Bernard Sanders", "Elizabeth Warren", "Joseph R. Biden Jr.", "Michael Bloomberg", "Pete Buttigieg"),]
primaryPolls<-read.csv("president_primary_polls_feb2020.csv", stringsAsFactors = FALSE)
primaryPolls$start_date<-as.Date(primaryPolls$start_date, "%m/%d/%Y")
primaryPolls<-primaryPolls[primaryPolls$state=="New Hampshire",]
primaryPolls<-primaryPolls[primaryPolls$candidate_name%in%c("Amy Klobuchar", "Bernard Sanders", "Elizabeth Warren", "Joseph R. Biden Jr.", "Michael Bloomberg", "Pete Buttigieg"),]
ggplot(data=primaryPolls)+
geom_point(mapping = aes(x=start_date, y=pct)) +
facet_wrap(methodology ~ candidate_name, nrow=2)
ggplot(data=primaryPolls)+
geom_point(mapping = aes(x=start_date, y=pct)) +
facet_wrap(population ~ candidate_name, nrow=2)
ggplot(data=primaryPolls)+
geom_point(mapping = aes(x=start_date, y=pct)) +
facet_wrap(population ~ candidate_name, nrow=4)
library("shiny")
runExample("01_hello") # a histogram
runExample("01_hello") # a histogram
runExample("02_text") # tables and data frames
runExample("03_reactivity") # a reactive expression
runExample("04_mpg") # global variables
runExample("05_sliders") # slider bars
runExample("06_tabsets") # tabbed panels
runExample("07_widgets") # help text and submit buttons
runExample("09_upload") # file upload wizard
runExample("10_download") # file download wizard
runApp('ShinyApps/MinimalExample')
runApp('ShinyApps/MinimalExample')
setwd("~/GitHub/jmontgomery.github.io/PDS/Slides/ShinyApps/MinimalExample")
shinyAppDir(getwd())
shinyAppDir(getwd())
shinyAppDir(getwd())
shinyAppDir(getwd())
runApp()
1951
runGist(6571951)
setwd("~/GitHub/jmontgomery.github.io/PDS/Datasets/SenateForecast")
read.csv("PollingCandidateData92-16.csv")
senateData<-read.csv("PollingCandidateData92-16.csv")
colnames(senateData)
table(senateData$state)
library(dplyr)
?select
missouriData<-senateData %>%
filter(state=="Missouri" & cycle=2016) %>%
select(c(Poll, daysLeft, Candidateidentifier))
missouriData<-senateData %>%
filter(state=="Missouri" & cycle=2016) %>%
select(c(Poll, daysLeft, Candidateidentifier))
missouriData<-senateData %>%
filter(state=="Missouri" & cycle=2016) %>%
select(list(Poll, daysLeft, Candidateidentifier))
missouriData<-senateData %>%
filter(state=="Missouri" & cycle=2016) %>%
select(list(Poll, daysLeft, Candidateidentifier))
missouriData<-senateData %>%
filter(state=="Missouri" & cycle=2016) %>%
select(list("Poll"))
missouriData<-senateData %>%
filter(state=="Missouri" & cycle=2016) %>%
select(list("Poll"))
missouriData<-senateData %>%
filter(state=="Missouri" & cycle=2016) %>%
select("Poll")
senateData$Poll
missouriData<-senateData %>%
filter(state=="Missouri" & cycle=2016)
missouriData<-senateData %>%
filter(state=="Missouri" & cycle==2016)
missouriData<-senateData %>%
filter(state=="Missouri" & cycle==2016) %>%
select("Poll")
missouriData<-senateData %>%
filter(state=="Missouri" & cycle==2016) %>%
select("Poll") %>%
glimps()
missouriData<-senateData %>%
filter(state=="Missouri" & cycle==2016) %>%
select("Poll") %>%
glims()
missouriData<-senateData %>%
filter(state=="Missouri" & cycle==2016) %>%
select("Poll") %>%
glymps()
missouriData<-senateData %>%
filter(state=="Missouri" & cycle==2016) %>%
select("Poll") %>%
glimpse()
missouriData<-senateData %>%
filter(state=="Missouri" & cycle==2016) %>%
select(c("Poll", "daysLeft", "Candidateidentifier")) %>%
glimpse()
missouriData<-senateData %>%
filter(state=="Missouri" & cycle==2016) %>%
select(c("Poll", "daysLeft", "Candidateidentifier")) %>%
glimpse()
missouriData<-senateData %>%
filter(state=="Missouri" & cycle==2016) %>%
select(c("Poll", "daysLeft", "Candidateidentifier")) %>%
glimpse()
libarary(ggplot2)
library(ggplot2)
library(ggplot2)
missouriData<-senateData %>%
filter(state=="Missouri" & cycle==2016) %>%
select(c("Poll", "daysLeft", "Candidateidentifier")) %>%
group_by(Candidateidentifier)%>%
glimpse()
?ggplot
ggplot(missouriData,
mapping=aes(
x="daysLeft",
y="Poll"
))
missouriData<-senateData %>%
filter(state=="Missouri" & cycle==2016) %>%
select(c("Poll", "daysLeft", "Candidateidentifier")) %>%
group_by(Candidateidentifier)%>%
glimpse()
library(ggplot2)
ggplot(missouriData,
mapping=aes(
x="daysLeft",
y="Poll"
))
ggplot(missouriData,
mapping=aes(
x="daysLeft",
y="Poll" + geom_line()
))
ggplot(missouriData,
mapping=aes(
x="daysLeft",
y="Poll"
)+ geom_line())
ggplot(missouriData,
mapping=aes(
x="daysLeft",
y="Poll"
))+geom_line()
ggplot(missouriData,
mapping=aes(x=daysLeft, y=Poll)) +
geom_line()
?geom_line
ggplot(missouriData,
mapping=aes(x=daysLeft, y=Poll)) +
geom_point()
ggplot(missouriData,
mapping=aes(x=daysLeft, y=Poll)) +
geom_point()  +
geom_smoth()
ggplot(missouriData,
mapping=aes(x=daysLeft, y=Poll)) +
geom_point()  +
geom_smoth()
ggplot(missouriData,
mapping=aes(x=daysLeft, y=Poll)) +
geom_point()  +
geom_smo0th()
ggplot(missouriData,
mapping=aes(x=daysLeft, y=Poll)) +
geom_point()  +
geom_smooth()
ggplot(missouriData,
mapping=aes(x=daysLeft, y=Poll, color=Candidateidentifier)) +
geom_point()  +
geom_smooth()
stateData<-senateData %>%
filter(state=="Alaska" & cycle==2016) %>%
select(c("Poll", "daysLeft", "Candidateidentifier")) %>%
group_by(Candidateidentifier)%>%
glimpse()
ggplot(stateData,
mapping=aes(x=daysLeft, y=Poll, color=Candidateidentifier)) +
geom_point()  +
geom_smooth()
stateData<-senateData %>%
filter(state=="Alaska" & cycle==2016) %>%
select(c("Poll", "daysLeft", "Candidateidentifier")) %>%
group_by(Candidateidentifier)%>%
glimpse()
senateData<-read.csv("PollingCandidateData92-16.csv")
stateData<-senateData %>%
filter(state=="Alaska" & cycle==2016) %>%
select(c("Poll", "daysLeft", "Candidateidentifier")) %>%
group_by(Candidateidentifier)%>%
glimpse()
stateData<-senateData %>%
filter(state=="North Carolina" & cycle==2016) %>%
select(c("Poll", "daysLeft", "Candidateidentifier")) %>%
group_by(Candidateidentifier)%>%
glimpse()
ggplot(stateData,
mapping=aes(x=daysLeft, y=Poll, color=Candidateidentifier)) +
geom_point()  +
geom_smooth()
stateName<-"North Carolina"
stateData<-senateData %>%
filter(state==sateName & cycle==2016) %>%
select(c("Poll", "daysLeft", "Candidateidentifier")) %>%
group_by(Candidateidentifier)%>%
glimpse()
library(ggplot2)
ggplot(stateData,
mapping=aes(x=daysLeft, y=Poll, color=Candidateidentifier)) +
geom_point()  +
geom_smooth() +
ggtitle(paste0("2016 Senate Election in", stateName))
ggplot(stateData, labs(y="Poll results", x="Days Till Election")
mapping=aes(x=daysLeft, y=Poll, color=Candidateidentifier)) +
geom_point()  +
geom_smooth() +
ggtitle(paste0("2016 Senate Election in", stateName))
ggplot(stateData, labs(y="Poll results", x="Days Till Election"),
mapping=aes(x=daysLeft, y=Poll, color=Candidateidentifier)) +
geom_point()  +
geom_smooth() +
ggtitle(paste0("2016 Senate Election in", stateName))
thisPlot<-ggplot(stateData,
mapping=aes(x=daysLeft, y=Poll, color=Candidateidentifier)) +
geom_point()  +
geom_smooth() +
ggtitle(paste0("2016 Senate Election in", stateName)) +
labs(y="Poll results", x="Days Till Election")
print(thisPlot)
thisPlot<-ggplot(stateData,
mapping=aes(x=daysLeft, y=Poll, color=Candidateidentifier)) +
geom_point()  +
geom_smooth() +
ggtitle(paste0("2016 Senate Election in", stateName)) +
labs(y="Poll results", x="Days Till Election")
print(thisPlot)
stateName<-"Alaska"
stateData<-senateData %>%
filter(state==stateName & cycle==2016) %>%
select(c("Poll", "daysLeft", "Candidateidentifier")) %>%
group_by(Candidateidentifier)%>%
glimpse()
senateData$state
table(senateData$state=="Alaska")
table(senateData$state=="Alaska", senateData$cycle==2016)
table(senateData$state[senateData$cycle==2016,])
table(senateData$state[senateData$cycle==2016])
runApp('~/GitHub/jmontgomery.github.io/PDS/Slides/ShinyApps/SenatePolls')
runApp('~/GitHub/jmontgomery.github.io/PDS/Slides/ShinyApps/SenatePolls')
runApp('~/GitHub/jmontgomery.github.io/PDS/Slides/ShinyApps/SenatePolls')
runApp('~/GitHub/jmontgomery.github.io/PDS/Slides/ShinyApps/SenatePolls2')
?checkboxInput
runApp('~/GitHub/jmontgomery.github.io/PDS/Slides/ShinyApps/SenatePolls2')
runApp('~/GitHub/jmontgomery.github.io/PDS/Slides/ShinyApps/SenatePolls2')
library(shiny)
runExample("01_hello") # a histogram
runExample("04_mpg")
runExample("08_html")
runExample("09_upload")
runApp('~/GitHub/jmontgomery.github.io/PDS/Slides/ShinyApps/MinimalExample')
runGist(6571951)
runGist(6571951)
runGist(6571951)
runApp('~/GitHub/jmontgomery.github.io/PDS/Slides/ShinyApps/MinimalExample')
runApp('~/GitHub/jmontgomery.github.io/PDS/Slides/ShinyApps/SenatePolls')
runApp('~/GitHub/jmontgomery.github.io/PDS/Slides/ShinyApps/SenatePolls')
runApp('~/GitHub/jmontgomery.github.io/PDS/Slides/ShinyApps/SenatePolls')
runApp('~/GitHub/jmontgomery.github.io/PDS/Slides/ShinyApps/SenatePolls2')
install.packages("dlstats")
libaray(dlstats)
library(dlstats)
cran_stats("catSurv")
downloads<-cran_stats("catSurv")
str(downloads)
sum(downloads$downloads)
