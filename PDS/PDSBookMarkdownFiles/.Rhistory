2+2
2+2
afsdio;jadfs
'dfsjklafsekl;afsd'
adfslnafdsjklafs
CSZklmndasklsdf
2+2
print("Hello world")
5+4 # Addition
6-3 # Subtraction
34 / 6 # Division
5 * 3 # Multiplication
5^4 # Exponents
625^(1/4) # More exponents
11%% 2 # modular arithmatic (11 mod 2)
31 %/% 7 # The integer part of a fraction
7*4 +3 # 31 divided by 7 is four plus remainder 3
6.25 # numbers
pi # And a few others
NA # Missing value
NULL # Nothing.
0/0 # NaN means "Not a number"
1/0 # Inf means infinity
Inf*20
2*(3-4)+2
2*(3-4)+2*(4 + 3)^(1/3)
turnout.ak<-238307/496387 # Turnout divided by voting age population
turnout.ak # the command 'print(object)' will be called if you just type the name
turnout.ak=238307/496387 # You can also use an equal sign
total.votes.ak <-  238307
voting.age.population.ak <- 496387
turnout.ak <-total.votes.ak/voting.age.population.ak
06election<-50000 ## no
objects() # List the objects currently on your global
ls() # same thing
Jacob<-100
ls()
rm(Jacob)
ls()
Jacob1<-Jacob2<-100
ls()
rm(list=c("Jacob1", "Jacob2"))
objects()
rm(list=ls())
total.votes.ak <-  238307
voting.age.population.ak <- 496387
turnout.ak <-total.votes.ak/voting.age.population.ak
fix(turnout.ak)
.x<-"Hide me"
print(.x)
ls()
q # q is a function with three inputs: save, status, runLast
log # log is a function that takes two command, an input of data and instructions on the correct base
exp(1) # exp(1) is itself a function that produces euler's constant
log(2) # ln(2)
apropos("norm") # finds all functions in your version of R with the string "norm" in the name
exp(log(1)) # e^ln(1) = 1
c(0,7,8) # the c() function is used to collect/concatenate things together into a vector
0; 7; 8
x<-c(0,7,8) # assign this to a named object
x # we can see x
print(x) #Same thing
show(x) #Same thing
numbers5to20 <- 5:20 # the : symbol creates sequences of increasing or decrasing numbers
numbers5to20 <- 5:20 # the : symbol creates sequences of increasing or decrasing numbers
numbers5to20
1.5:10 # always increments by 1, and may not get to top number
c(numbers5to20, x) #concatenate two vectors together
numbers5to20*2
sqrt(numbers5to20)
numbers5to20^2
numbers5to20*numbers5to20
numbers5to20+numbers5to20
numbers5to20+rev(numbers5to20) # What just happened?
sum(numbers5to20)
mean(numbers5to20)
vap<-voting.age.population<-c(3481823, 496387, 4582842, 2120139,26955438,3617942,2673154,652189,472143,14085749,6915512,995937,1073799,9600372,4732010,2265860,2068253,3213141,3188765,1033632,4242214,4997677,7620982,3908159,2139918,4426278,731365,1321923,1870315,1012033,6598368,1452962,14838076,6752018,494923,8697456,2697855,2850525,9612380,824854,3303593,594599,4636679,17038979,1797941,487900,5841335,4876661,1421717,4257230,392344)
total.votes<-tv<-c(NA, 238307, 1553032, 780409,8899059,1586105, 1162391,258053, 122356,4884544, 2143845,348988, 458927,3586292, 1719351,1071509, 864083,1370062, 954896,NA, 1809237, 2243835,3852008, 2217552,NA, 2178278, 411061,610499, 586274,418550, 2315643,568597, 4703830,2036451, 220479,4184072, NA,1399650, NA,392882, 1117311,341105, 1868363,NA, 582561, 263025,2398589, 2085074,473014, 2183155, 196217)
m1<-cbind(vap, tv) # Combined by column
head(m1)
m2<-rbind(vap, tv) # combined by row
m2[1,2] # first row, second column
m1[,1] # the ith colum
m1[1:5,1:2] # a submatrix
m2[1,1:10]
m2[1:2, 1:10]
m2[1,1:10]
m2[1:2, 1:10]
m1[,1] # the ith colum
m2[, 1:10] # same as previous line since there are only two rows.
class(m2)
matrix(1:10, nrow=5)
matrix(1:10, ncol=2) #the same
matrix(1:10, nrow=5, ncol=2) # the same
matrix(1:10, nrow=5, byrow=T) ## not the same
matrix(2:11, ncol=2) #the same
matrix(2:10, ncol=2) #the same
a <- array(1:24, dim=c(3,4,2))
a
a[,,1]
a[,1,]
a[1,,]
dim(a) # Attributes are some piece of data associated with the structure that isn't the data itself
attributes(a)
dim(m1) # number of rows, number of columns
attributes(m1) # there is another attribute here -- the columns have names
dimnames(m1) # we can either assign or get the dimnames attribute
dimnames(m2) # here the columns have no names
dimnames(m1)[[2]][1]<-"Jacob"
head(m1) # We have re-named the first column to have the name "Jacob"
dimnames(m1)[[2]][1]<-"vap" # all of this bracketing is because this is a list ... what's a list?
head(m1)
colnames(m1)
colnames(m2)
rownames(m1)
rownames(m2)
list.a<-list(m1, vap, 3) # m1 is a matrix, vap is a vector, 3 is an integer
list.a
vector1<-c(1,2,3)
gospels<-c("matthew","mark","luke", "john")
my.matrix<-matrix(c(1:20), nrow=4)
my.data<-data.frame(cbind(vap, tv))
my.crazy.list<-list(vector1, gospels, my.matrix, TRUE, list.a)
my.crazy.list # we can combine anything we want -- we can even include other lists in our lists
str(my.crazy.list) # the str() function is useful for looking at the basic componens of any complicated object like this
attributes(my.crazy.list) # lists has attributes, but we haven't set them
names(my.crazy.list)[[2]]<-"gospels"
attributes(my.crazy.list) # lists has attributes, but we haven't set them
str(my.crazy.list) # now each part of the list has a name attribute
length(my.crazy.list) # this reports the number of major sub-elements in the list
dim(my.crazy.list) # this won't work for complicated lists
names(my.crazy.list)<-c("one", "two", "three", "four", "five")
str(my.crazy.list) # now each part of the list has a name attribute
my.crazy.list
my.crazy.list<-list(one=vector1,two=gospels, three=my.matrix, four=TRUE, five=list.a)
str(my.crazy.list)
names(my.crazy.list)
my.crazy.list2<-list(one=vector1,jacob=gospels, three=my.matrix, four=TRUE, five=list.a)
str(my.crazy.list)
str(my.crazy.list2)
my.crazy.list[[1]]
my.crazy.list$one
my.crazy.list[1]
my.crazy.list["one"]
my.crazy.list$jacob<-"mad math skills"
my.crazy.list # now we have added another element
my.crazy.list[[3]][1,] # first row of my.matrix
my.matrix[1,]  #the same
my.crazy.list +2 # not so much
my.crazy.list[[3]] + 2
x <- 1:10
y <- x^2
plot(x, y)
abline(lm(y ~ x), col='red')
model <- lm(y ~ x)
class(model)
attributes(model)
help(lm)
is.list(model)
model$coefficients
model$fitted.values
length(model)
length(names(model))
print(model)
plot(x,y)
plot(model)
turnout<-tv/vap
voting.data <- data.frame(tv, vap, turnout)
head(voting.data)
str(voting.data)
head(voting.data[[1]])
head(voting.data$tv)
head(voting.data["tv"])
head(voting.data[,1])
names(voting.data)
colnames(voting.data)
as.data.frame(my.matrix)
data.frame(my.matrix)
head(as.matrix(voting.data))
attach(voting.data)
search() # there it is
mean(vap)
mean(voting.data$vap)
detach(voting.data) # we can unattach it after a while if we want
View(my.data)
getwd()
str(votes.06)
votes.06<-read.csv("~/Dropbox/Classes/R Programming/R Scripts/VotingData2006.csv", header=T)
str(votes.06)
with(votes.06, hist(Tot.Felon/VAP)) # just for fun
file="VD06.csv"
write.csv(votes.06, file="VD06.csv")
2309157-298880
2309157-2298880
devtools::install_github('mlampros/fastTextR')
devtools::install_github('mlampros/fastTextR')
devtools::install_github('mlampros/fastTextR')
devtools::install_github('mlampros/fastTextR')
clang++ -std=gnu++11 -I/Library/Frameworks/R.framework/Resources/include    -I../inst/include/ -I"/Library/Frameworks/R.framework/Versions/3.5/Resources/library/Rcpp/include" -I"/Library/Frameworks/R.framework/Versions/3.5/Resources/library/RcppArmadillo/include" -I/usr/local/include  -fopenmp -fPIC  -Wall -g -O2 -c RcppExports.cpp -o RcppExports.o
clang++ -std=gnu++11 -I/Library/Frameworks/R.framework/Resources/include    -I../inst/include/ -I"/Library/Frameworks/R.framework/Versions/3.5/Resources/library/Rcpp/include" -I"/Library/Frameworks/R.framework/Versions/3.5/Resources/library/RcppArmadillo/include" -I/usr/local/include  -fopenmp -fPIC  -Wall -g -O2 -c RcppExports.cpp -o RcppExports.o
devtools::install_github('mlampros/fastTextR')
devtools::install_github('mlampros/fastTextR')
devtools::install_github('mlampros/fastTextR')
devtools::install_github('mlampros/fastTextR')
devtools::install_github('mlampros/fastTextR')
devtools::install_github('mlampros/fastTextR')
devtools::install_github('tractatus/velocyto.R')
install.packages("RColorBrewer")
install.packages("readr")
library(readr)
?readr
readxl(path="GradPlacements.xlsx")
library("readxl")
install.packages("readxl")
library(readxl)
readxl(path="GradPlacements.xlsx")
?readxl
read_xl(path="GradPlacements.xlsx")
read_excel(path="GradPlacements.xlsx")
read_excel("GradPlacements.xlsx")
setwd("~/Dropbox/Service/StrategicPlanning")
read_excel("GradPlacements.xlsx")
data<-read_excel("GradPlacements.xlsx")
colnames(data)
data<-read_excel("GradPlacements.xlsx")[,1:5]
colnames(data)
library(dplyr)
?dplyr
?summarize
placeData<-read_excel("GradPlacements.xlsx")[,1:5]
view(placeData)
placeData<-read_excel("GradPlacements.xlsx")[,1:5]
View(placeData)
placeData %>%
group_by(School)
placeData %>%
group_by(School) %>%
summarise(mean = mean(Score))
placeData %>%
group_by(School, Year) %>%
summarise(mean = mean(Score))
sum_place<-placeData %>%
group_by(School, Year) %>%
summarise(mean = mean(Score))
sum_place
View(sum_place)
View(sum_place)
ggplot(sum_place, aes(x=Year, y=mean), group=School)
library(ggplot)
library(ggplot2)
ggplot(sum_place, aes(x=Year, y=mean), group=School)
ggplot(sum_place, aes(x=Year, y=mean, group=School))
ggplot(sum_place, aes(x=Year, y=mean, group=School))+
geom_point()
ggplot(sum_place, aes(x=Year, y=mean, group=School))+
geom_line()+
geom_point()
ggplot(sum_place, aes(x=Year, y=mean, group=School))+
geom_line(aes(linetype=School))+
geom_point()
ggplot(sum_place, aes(x=Year, y=mean, group=School))+
geom_line(aes(linetype=School, col=Schol))+
geom_point()
ggplot(sum_place, aes(x=Year, y=mean, group=School))+
geom_line(aes(linetype=School, col=School))+
geom_point()
ggplot(sum_place, aes(x=Year, y=mean, group=School))+
geom_line(aes(linetype=School, col=School))+
geom_point(pch=School, col=School)
ggplot(sum_place, aes(x=Year, y=mean, group=School))+
geom_line(aes(linetype=School, col=School))+
geom_point(shape=supp, col=School)
ggplot(sum_place, aes(x=Year, y=mean, group=School))+
geom_line(aes(linetype=School, col=School))+
geom_point(shape=School, col=School)
ggplot(sum_place, aes(x=Year, y=mean, group=School))+
geom_line(aes(linetype=School, col=School))+
geom_point(aes(shape=School, col=School))
library("bookdown")
setwd("~/Github/jmontgomery.github.io/PDS/PDSBookMarkdownFiles")
bookdown::render_book(input="index.Rmd", output_dir="~/Github/jmontgomery.github.io/PDS/PDSBook")
bookdown::render_book(input="index.Rmd", output_dir="~/Github/jmontgomery.github.io/PDS/PDSBook")
bookdown::render_book(input="index.Rmd", output_dir="~/Github/jmontgomery.github.io/PDS/PDSBook")
bookdown::render_book(input="index.Rmd", output_dir="~/Github/jmontgomery.github.io/PDS/PoliticalDataScience")
bookdown::render_book(input="index.Rmd", output_dir="~/Github/jmontgomery.github.io/PDS/PoliticalDataScience")
bookdown::render_book(input="index.Rmd", output_dir="~/Github/jmontgomery.github.io/PDS/PoliticalDataScience")
setwd("~/Github/jmontgomery.github.io/PDS/PDSBookMarkdownFiles")
bookdown::render_book(input="index.Rmd", output_dir="~/Github/jmontgomery.github.io/PDS/PoliticalDataScience")
